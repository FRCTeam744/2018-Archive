	//this is the code to be inserted by the 744fakeableDev template
	//set up in eclipse preferences
	private Fixme_ClassName m_realObj = null;
	private boolean m_beingFaked = false;
	private void setupAsFake() {
		m_realObj = null;
		m_beingFaked = true;
	}	
	public boolean isFake() { return m_beingFaked; }
	public boolean isReal() { return ! m_beingFaked; }
	
	private FakeParms m_fakeParms;
	public class FakeParms {
		//any fields or methods that the 'fake' object needs to
		//emulate should be coded here.
		int f_thing;
		public int get() { return f_thing; }
		public void set(int newVal) { f_thing = newVal; }
		
		public FakeParms() {
			f_thing = 0;
		}
	}
	
	//top-level constructor
	public TmFakeable_Fixme_ClassName() {
		m_fakeParms = new FakeParms();
		String errMsg = thisClassName + " " + nameForObj + " got an exception:";
		
		try { 
			m_realObj = new Fixme_ClassName();
			//set up whatever else is needed here...
		}
		//some devices don't generate errors or exceptions when they're not
		//present.  For those, need to use preferences file or some other 
		//means of telling the code to use 'fake' devices
		catch( Fixme_ExceptionIndicatingRealDeviceNotAvailable t) { 
			TmExceptions.reportExceptionOneLine(t, errMsgPrefix);
			setupAsFake();
		}
		catch(Throwable t) { 
			TmExceptions.reportExceptionMultiLine(t, errMsgPrefix);
			setupAsFake();
		}
		if(Fixme_somePreferencesSettingOrOptionFlag=="use fake") {
			Tt.println("Per ... setting, " + thisClassName + " " + nameForObj +
				" will be a FAKE Fixme_ClassName");
		} else
  		if(isFake()) { 
  			Tt.println(thisClassName + " " + nameForObj + 
  					" will be a FAKE Fixme_ClassName"); 
  		}
	}
	
	//--- helper methods for methods used with real device
	public int get() {
		if(isFake()) {
			return m_fakeParms.get();
		} else {
			return m_realObj.get();
		}
	}
	
	public void set(int newVal) {
		if(isFake()) {
			m_fakeParms.set(newVal);
		} else {
			m_realObj.set(newVal);
		}
	}