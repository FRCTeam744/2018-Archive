package org.usfirst.frc.team744.yr2015.robot.subsystems;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import org.usfirst.frc.team744.yr2015.robot.TmDbgTk;
//import org.usfirst.frc.team744.yr2015.robot.TmHdwrRo;
//import org.usfirst.frc.team744.yr2015.robot.TmMisc;
import org.usfirst.frc.team744.yr2015.robot.TmTools;
import org.usfirst.frc.team744.yr2015.robot.driverStation.TmDriverStation;
import org.usfirst.frc.team744.yr2015.robot.helpers.TmStdSubsystemI;
//import org.usfirst.frc.team744.yr2015.robot.smartdash.TmLabviewDashboard;
//import org.usfirst.frc.team744.yr2015.robot.smartdash.TmSdDbgSD;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;

public class TmSsDancingLeds extends Subsystem implements TmStdSubsystemI {
	
	SerialPort m_serial;
	I2C m_i2c;
	
	//provides the 7-bit addr.  On the bus, the address byte will be either 0x08 or 0x09 depending
	//on whether the transaction is a read or a write.
	private static final byte ARDUINO_7BIT_I2C_ADDR = (byte)(4); //7-bit address right justified in a byte
	
	InterfaceSelectE m_ifSel;	
	public enum InterfaceSelectE {I2C } //I2C, USB, RS232 }
	
	public static boolean m_cmdInProgress;
	private static boolean m_pseudoCmdInProgress; //JML3.2
	private static boolean m_setInitStatesPending; //JML3.2
	private Command m_cmdSetInitStates;
	private boolean m_needSetInitStates;
	private SupportLocalCmdTestDancingLeds m_support;
	public boolean m_dancingLedsOn;
	
	//Arduino takes 20secs, roboRIO takes 25 (more or less)
	private static final double ARDUINO_BOOT_TIME = 3;  //JML3.1//give Arduino this many seconds before talking to it
	Timer m_bootTimer; //JML3.1
	
	private boolean m_foundValidI2cResponse;
	private int m_i2cAbortedCount;
	
	private TmSsElevator m_elevator;
	private TmSsBinArm m_binArm; //JML3.3
	
	private int m_elevEncoderDbgMsgCnt; //JML5.2
	
	/*************************
	 * !!! JML3.3 don't enable this unless/until Arduino code supports it,
	 *            SupportLocalCmdTestDancingLeds.execute() has the appropriate
	 *            cases uncommented, etc.
	 *************************/
	private static final boolean SEND_BIN_ARM_ENCODER_CMD = false; //JML3.3
	
	private static final Object m_commIfLock = new Object();
    public static final Object m_onOffLock = new Object();
	
	private String m_classNameId;

	public static synchronized TmSsDancingLeds getInstance() {
		if(m_instance==null) {m_instance = new TmSsDancingLeds(InterfaceSelectE.I2C); }
		return m_instance;
	}
	public static synchronized TmSsDancingLeds getInstance(InterfaceSelectE ifSel) {
		if(m_instance==null) {m_instance = new TmSsDancingLeds(ifSel); }
		return m_instance;
	}
	private static TmSsDancingLeds m_instance;
	
	private TmSsDancingLeds() {
		this(InterfaceSelectE.I2C);
	}

	private TmSsDancingLeds(InterfaceSelectE ifSel) {
		m_classNameId = TmTools.extractClassName(this.toString());
		
		m_ifSel = ifSel;
		
//		m_serial = null;
		m_i2c = null;
//		m_usb = null;
				
		m_cmdInProgress= false;
		m_pseudoCmdInProgress = false; //JML3.2
		m_setInitStatesPending = false; //JML3.2
		m_needSetInitStates = false; //JML6.4
		m_dancingLedsOn = true;
		m_foundValidI2cResponse = false;
		m_i2cAbortedCount = 0;
		
		m_elevEncoderDbgMsgCnt = 250; //JML5.2
	}

	private void verifyIfInit() {
		switch(m_ifSel) {
		case I2C:
			if(m_i2c == null) {	m_i2c = new I2C(I2C.Port.kMXP, ARDUINO_7BIT_I2C_ADDR); }
			break;
//		case USB:
//			if(m_serial == null) { m_serial = new SerialPort(9600, SerialPort.Port.kUSB); }
//			break;
//		case RS232:
//			break;
		}
	}
	
	private void freeIf() {
		switch(m_ifSel) {
		case I2C:
			if(m_i2c != null) {	m_i2c.free(); m_i2c = null; }
			break;
//		case USB:
//			if(m_serial == null) { m_serial = new SerialPort(9600, SerialPort.Port.kUSB); }
//			break;
//		case RS232:
//			break;
		}
	}
	
	@Override
	public void doRoboInit() {
		m_bootTimer = new Timer(); //JML6.3 moved here //JML3.1 - see ARDUINO_BOOT_TIME
		m_bootTimer.start(); //JML3.1, JML6.3
		m_elevator = TmSsElevator.getInstance();
		m_binArm = TmSsBinArm.getInstance(); //JML3.3
		m_support = new SupportLocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES);
		m_cmdSetInitStates = new LocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES);
		m_needSetInitStates = true;
	}

	@Override
	public void doDisabledInit() {
	 	if(m_cmdInProgress || (m_bootTimer.get() < ARDUINO_BOOT_TIME)) { //JML3.2
	 		m_setInitStatesPending = true;
		}
	 	else if(true /*JML3.2*/ || m_needSetInitStates) {
			m_support.initialize();
			m_pseudoCmdInProgress = true; //JML3.2
			//commands don't run when robot is disabled. do this manually
			//doPeriodic() will call the execute() and isFinished() methods
//			m_cmdSetInitStates = new LocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES);
//			m_cmdSetInitStates.start();
////			m_needSetInitStates = false;
		} else {
			sendRobotStateCmd(ArduinoRobotStateE.DISABLED, SHOW_DEBUG_MSGS);
		}
	 	m_elevEncoderDbgMsgCnt = 250; //JML5.2
	}

	@Override
	public void doAutonomousInit() {
		if(m_cmdInProgress || m_pseudoCmdInProgress || (m_bootTimer.get() < ARDUINO_BOOT_TIME)) { //JML3.2
	 		m_setInitStatesPending = true;
		}
	 	else if(true /*JML3.2*/ || m_needSetInitStates) {
////			m_cmdSetInitStates = new LocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES);
//JML3.2	//in competition we should never get into this while loop, but we might in the lab.
//JML3.2	while(m_cmdSetInitStates.isRunning()) { m_cmdSetInitStates.cancel(); Timer.delay(0.001); }
			m_cmdSetInitStates.start();
//			m_needSetInitStates = false;
		} else {
			sendRobotStateCmd(ArduinoRobotStateE.AUTONOMOUS, SHOW_DEBUG_MSGS);
		}
		m_elevEncoderDbgMsgCnt = 250; //JML5.2
	}

	@Override
	public void doTeleopInit() {
	 	if(m_cmdInProgress || m_pseudoCmdInProgress || (m_bootTimer.get() < ARDUINO_BOOT_TIME)) { //JML3.2
	 		m_setInitStatesPending = true;
		}
	 	else if(true /*JML3.2*/ || m_needSetInitStates) {
////			m_cmdSetInitStates = new LocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES);
//JML3.2	//in competition we should never get into this while loop, but we might in the lab.
//JML3.2	while(m_cmdSetInitStates.isRunning()) { m_cmdSetInitStates.cancel(); Timer.delay(0.001); }
			m_cmdSetInitStates.start();
//			m_needSetInitStates = false;
		} else {
			sendRobotStateCmd(ArduinoRobotStateE.TELEOP, SHOW_DEBUG_MSGS);
		}
	 	m_elevEncoderDbgMsgCnt = 250; //JML5.2
	}

	@Override
	public void doLwTestInit() {
		if(m_cmdSetInitStates.isRunning()) { m_cmdSetInitStates.cancel(); }
	}

	@Override
	public void doDisabledPeriodic() {
		doPeriodic(); //JML3.3
//JML3.3
//		if(m_bootTimer.get() < ARDUINO_BOOT_TIME) { //JML3.1
//			//wait while Arduino boots
//		}
//		else if(m_needSetInitStates) {
//			if( ! m_support.isFinished()) {	m_support.execute(); }
//			else { m_support.end(); }
//		} else {
//			sendEncoderReading(m_elevator.getEncoderReading());
//			if(SEND_BIN_ARM_ENCODER_CMD) { sendEncoderReading(m_binArm.getEncoderReading(); } //JML3.3
//		}
////      //commands don't run when robot is disabled		
////		if( ! m_cmdSetInitStates.isRunning()) {
////			sendEncoderReading(m_elevator.getEncoderReading());
////		}
	}

	@Override
	public void doAutonomousPeriodic() {
		doPeriodic(); //JML3.3
//JML3.3
//		if(m_bootTimer.get() < ARDUINO_BOOT_TIME) { //JML3.1
//			//wait while Arduino boots
//		}
//		else if(m_needSetInitStates) { //JML3.2
//			if( ! m_support.isFinished()) {	m_support.execute(); }
//			else { m_support.end(); }
//		}
////JML3.2else if( ! m_cmdSetInitStates.isRunning()) {
//		else {//JML3.2 if( ! m_cmdSetInitStates.isRunning()) {
//			sendEncoderReading(m_elevator.getEncoderReading());
//		}
	}

	@Override
	public void doTeleopPeriodic() {
		doPeriodic(); //JML3.3
//JML3.3
//		if(m_bootTimer.get() < ARDUINO_BOOT_TIME) { //JML3.1
//			//wait while Arduino boots
//		}
//		else if(m_needSetInitStates) { //JML3.2
//			if( ! m_support.isFinished()) {	m_support.execute(); }
//			else { m_support.end(); }
//		}
////JML3.2else if( ! m_cmdSetInitStates.isRunning()) {
//		else {//JML3.2 if( ! m_cmdSetInitStates.isRunning()) {
//			sendEncoderReading(m_elevator.getEncoderReading());
//		}
	}

	private void doPeriodic() { //JML3.3
		if(m_bootTimer.get() < ARDUINO_BOOT_TIME) { //JML3.1
			//wait while Arduino boots
		}
		else if(m_needSetInitStates || m_pseudoCmdInProgress) {
			if(m_support.lc_testTimer == null) {//JML6.1
				TmDbgTk.printIt(-1, "BUG!! - doPeriodic m_support.lc_testTimer==null m_needSetInitStates=" + m_needSetInitStates +
						" m_pseudoCmdInProgress=" + m_pseudoCmdInProgress + " m_cmdInProgress=" + m_cmdInProgress + " m_bootTimer.get()=" + m_bootTimer.get()); 
				m_support.initialize();
			}
			if( ! m_support.isFinished()) {	m_support.execute(); }
			else { 
				m_support.end();
				m_pseudoCmdInProgress = false;
			}
		} 
//		public static boolean m_cmdInProgress;
//		private static boolean m_pseudoCmdInProgress; //JML3.2
//		private static boolean m_setInitStatesPending; //JML3.2
//		private Command m_cmdSetInitStates;
		else if( ( ! m_cmdInProgress) && m_setInitStatesPending) { //JML3.2
			m_setInitStatesPending = false;
			if(TmDriverStation.getInstance().isDisabled()) {
				//can't run commands while disabled; use m_support to call the methods manually.
				m_needSetInitStates = true;
				m_support.initialize();
			} 
			else if(TmDriverStation.getInstance().isLiveWindowTest()) { 
				//do nothing
			}
			else {
				m_cmdSetInitStates.start();
			}
		}
		else {
			boolean dbgMsgs = (m_elevEncoderDbgMsgCnt > 0) && (m_elevator.getEncoderReading() != 0); //JML5.2
			sendEncoderReading(ArduinoCmdsE.ELEV_ENCODER_READING, m_elevator.getEncoderReading()); //JML3.3 add ArduinoCmdsE parm
			if(SEND_BIN_ARM_ENCODER_CMD) { sendEncoderReading(ArduinoCmdsE.BIN_ARM_ENCODER_READING, m_binArm.getEncoderReading()); } //JML3.3
		}
	}
	
	@Override
	protected void initDefaultCommand() {
		// TODO Auto-generated method stub

	}
	
	public enum ArduinoColorsE { RED('r'), BLUE('b'), RANDOM('m'), FLASH('f');
	     public char cmdSuffix;
	     private ArduinoColorsE(char cmdSuff) { cmdSuffix = cmdSuff; }
	}
	
	public enum ArduinoRobotStateE { ENABLED('e'), DISABLED('d'), AUTONOMOUS('a'), TELEOP('t'), LIVE_WINDOW('l'),
										RED_ALLIANCE('r'), BLUE_ALLIANCE('b');	
	    public char cmdSuffix;
	    private ArduinoRobotStateE(char cmdSuff) { cmdSuffix = cmdSuff; }
	}

	public enum ArduinoMechanismSelectE { ELEVATOR('e'), MECHANICAL_ARM('a');	
	    public char cmdSuffix;
	    private ArduinoMechanismSelectE(char cmdSuff) { cmdSuffix = cmdSuff; }
	}


	public enum ArduinoCmdsE {
		SET_ROBOT_STATE('r', 1), //parm = ArduinoRobotStateE
		SET_MECHANISM('m', 1), //parm = ArduinoMechanismSelectE //JML7.1
		ELEV_ENCODER_READING('e', 2), //parms = elevator encoder reading //JML3.3 cmnt only
		BIN_ARM_ENCODER_READING('b', 2), //parms = bin arm encoder reading //JML3.3 added
		STR_LEDS_ON('o' + "n"),
		STR_LEDS_OFF('o' + "ff"),
		SET_COLOR('c', 1), //parm = ArduinoColorsE
		;
		public byte cmdByte;
		public String cmdString;
		public int cmdLength;
		
//		private ArduinoCmdsE(char cmd, ArduinoColorsE colorSel) {
//			this("" + cmd + colorSel.cmdSuffix);
//		}
		private ArduinoCmdsE(char cmd, int dataByteCnt) {
			this.cmdByte = (byte)cmd;
			this.cmdString = cmd + "";
			cmdLength = 1 + dataByteCnt;	
		}
		private ArduinoCmdsE(String cmdStr) {
			cmdByte = (byte)cmdStr.charAt(0);
			cmdString = cmdStr;
			cmdLength = cmdStr.length();
		}
	}
	
	public void sendSetColorCmd(ArduinoColorsE color) {
		sendSetColorCmd(color, NO_DEBUG_MSGS);
	}
	public void sendSetColorCmd(ArduinoColorsE color, boolean showDebugMsgs) {
		sendStrCmd(ArduinoCmdsE.SET_COLOR.cmdString + color.cmdSuffix, "set color to " + color.toString(), showDebugMsgs);
	}
	
	public void sendRobotStateCmd(ArduinoRobotStateE state) {
		sendRobotStateCmd(state, NO_DEBUG_MSGS);
	}
	public void sendRobotStateCmd(ArduinoRobotStateE state, boolean showDebugMsgs) {
		sendStrCmd(ArduinoCmdsE.SET_ROBOT_STATE.cmdString + state.cmdSuffix, "set state to " + state.toString(), showDebugMsgs);
	}
	
	public void sendMechanismSelectCmd(ArduinoMechanismSelectE mechanism) {
		sendMechanismSelectCmd(mechanism, NO_DEBUG_MSGS);
	}
	public void sendMechanismSelectCmd(ArduinoMechanismSelectE mechanism, boolean showDebugMsgs) {
		sendStrCmd(ArduinoCmdsE.SET_MECHANISM.cmdString + mechanism.cmdSuffix, //JML7.1
				"set mechanism to " + mechanism.toString(), showDebugMsgs);
	}
	
	public void sendLedsOnStrCmd() {
		sendLedsOnStrCmd(NO_DEBUG_MSGS);
	}
	public void sendLedsOnStrCmd(boolean showDebugMsgs) {
		synchronized(m_onOffLock) { //example of reentrant synchronization (see LocalCmdToggleDancingLedsOnOff)
			sendStrCmd(ArduinoCmdsE.STR_LEDS_ON.cmdString, "LEDs on", showDebugMsgs);
			m_dancingLedsOn = true;
		}
	}
	
	public void sendLedsOffStrCmd() {
		sendLedsOffStrCmd(NO_DEBUG_MSGS);
	}
	public void sendLedsOffStrCmd(boolean showDebugMsgs) {
		synchronized(m_onOffLock) { //example of reentrant synchronization (see LocalCmdToggleDancingLedsOnOff)
			sendStrCmd(ArduinoCmdsE.STR_LEDS_OFF.cmdString, "LEDs off", showDebugMsgs);	
			m_dancingLedsOn = false;
		}
	}
	
	public enum I2cCmdStatusE { ABORTED, SENT, SKIPPED }
	public void sendStrCmd(String cmdStr, String dbgPrtText) {
		sendStrCmd(cmdStr, dbgPrtText, NO_DEBUG_MSGS);
	}
	public void sendStrCmd(String cmdStr, String dbgPrtText, boolean showDebugMsgs) {
		byte[] txData;
		int cmdLen = cmdStr.length(); //ArduinoCmdsE.STR_LEDS_OFF.cmdLength;
		String cmd = cmdStr; //ArduinoCmdsE.STR_LEDS_OFF.cmdString;
		txData = new byte[cmdLen];
		I2cCmdStatusE cmdStatus = I2cCmdStatusE.SKIPPED;
		String cmdToString = "";
		
//		cmd.toCharArray();
		cmdToString +=  "cmd=" + cmd + " len=" + cmdLen + " {";
//		TmDbgTk.printIt(-1, "cmd=" + cmd + " len=" + cmdLen);
		//ByteBuffer has methods that convert from non-bytes to byte[] and vice-versa, specifying endianness.
		//Changes made in the ByteBuffer are reflected in the byte[] too.
		ByteBuffer txDataBb = ByteBuffer.wrap(txData);
		txDataBb.order(ByteOrder.BIG_ENDIAN);
		for(int i=0; i<cmdLen; i++) {
			cmdToString += "i=" + i + " char=" + cmd.charAt(i) + " (" + (int)(cmd.charAt(i)) + ")";
//			TmDbgTk.printIt(-1, "i=" + i + " char=" + cmd.charAt(i) + " (" + (int)(cmd.charAt(i)) + ")");
			txData[i] = (byte)(cmd.charAt(i));
		}
		cmdToString += "} {";
		
		for(int i=0; i<cmdLen; i++) {
//			TmDbgTk.printIt(-1, "txData[" + i + "] = " + txData[i] + " = " + TmDbgTk.numToHexString(txData[i]) );
			cmdToString += "txData[" + i + "]=" + txData[i] + "=" + TmDbgTk.numToHexString(txData[i]);
		}
		cmdToString += "}";
		TmDbgTk.printIt(-1, cmdToString);
		
		cmdStatus = handleSendingCmd(txData, showDebugMsgs);
		
//		if(( ! m_ifSel.equals(InterfaceSelectE.I2C)) || m_foundValidI2cResponse || m_i2cAbortedCount<20) {
////			private I2cCmdStatusE serviceI2cWriteBulk(byte[] txData, boolean showDebugMsgs) {
//			cmdStatus = handleSendingCmd(txData, showDebugMsgs);
////			synchronized(m_commIfLock) {
////				verifyIfInit();
////				switch(m_ifSel) {
////				case I2C:
////					//the data array has to be the exact size specified in the length parm or i2c code blows up
////		//			boolean aborted = m_i2c.transaction(txData, txData.length, null, 0);
////					boolean aborted = m_i2c.writeBulk(txData);
////					if(aborted) { 
////						if( ! showDebugMsgs) { TmDbgTk.printIt(-1, "i2c transaction aborted"); }
////						if( ! m_foundValidI2cResponse) {
////							m_i2cAbortedCount++;
////							cmdStatus = I2cCmdStatusE.ABORTED;
////						}
////					} else {
////						m_foundValidI2cResponse = true;
////						cmdStatus = I2cCmdStatusE.SENT;
////					}
////					break;
////		//		case USB:
////		//			m_serial.write(txData, txData.length);
////		//			break;
////		//		case RS232:
////		//			break;
////				}
////				freeIf();
////			}
//		}
//		else if(m_i2cAbortedCount==21){
//			TmDbgTk.printIt(-1, "20 i2c transactions have aborted without a valid response. Assume i2c not connected (sendStrCmd())");
//			m_i2cAbortedCount++; //so this message only prints one time...
//		}
//		else {}
		
		if(showDebugMsgs || cmdStatus.equals(I2cCmdStatusE.ABORTED)) {
			TmDbgTk.printIt(-1, cmdStatus.toString() + " i2c string cmd: " + cmdStr + ((dbgPrtText.length() != 0) ? " - " + dbgPrtText : ""));
		}
	}

	private final static boolean NO_DEBUG_MSGS = false;
	private final static boolean SHOW_DEBUG_MSGS = true;
	public void sendEncoderReading(ArduinoCmdsE cmdDef, int encoderReading) { //JML3.3 add cmdDef parm
		sendEncoderReading(cmdDef, encoderReading, NO_DEBUG_MSGS);
	}
	public void sendEncoderReading(ArduinoCmdsE cmdDef, int encoderReading, boolean showDebugMsgs) { //JML3.3 add cmdDef parm
//JML3.3	byte[] txData = { ArduinoCmdsE.ENCODER_READING.cmdByte, 0, 0 };
		byte[] txData = { cmdDef.cmdByte, 0, 0 }; //JML3.3
		//elevator encoder goes negative as elevator moves up, 
		//convert it to a positive 16-bit value for the Arduino code
		short encoderValue = (short)((-encoderReading) & 0xFFFF);
		String cmdToString = "";
		//never send negative values to Arduino code //JML5.2
		if(encoderValue < 0) { encoderValue = 0; } //JML5.2
		
		I2cCmdStatusE cmdStatus = I2cCmdStatusE.SKIPPED;
		
//		if(txData.length != ArduinoCmdsE.ENCODER_READING.cmdLength) {
//			TmDbgTk.printIt(-1, m_classNameId + "!!!Fix enum value for ArduinoCmdsE." + 
//										ArduinoCmdsE.ENCODER_READING.toString() + "!!!");
//		}
		if(txData.length != cmdDef.cmdLength) { //JML3.3 switch to cmdDef from hardcoded cmd
			TmDbgTk.printIt(-1, m_classNameId + "!!!Fix enum value for ArduinoCmdsE." + cmdDef.toString() + "!!!");
		}
		
		txData[1] = (byte)(encoderValue/256); 
		txData[2] = (byte)(encoderValue & 0xFF); 
		
		if(showDebugMsgs) for(int i=0; i<txData.length; i++) {
//			TmDbgTk.printIt(-1, "txData[" + i + "] = " + txData[i] + " = " + TmDbgTk.numToHexString(txData[i]) );
			cmdToString += " txData[" + i + "]=" + txData[i] + "=" + TmDbgTk.numToHexString(txData[i], 2);
		}
		
		if(showDebugMsgs) { TmDbgTk.printIt(-1, cmdToString); }

		cmdStatus = handleSendingCmd(txData, showDebugMsgs);
		
//		if(( ! m_ifSel.equals(InterfaceSelectE.I2C)) || m_foundValidI2cResponse || m_i2cAbortedCount<=20) {
//			synchronized(m_commIfLock) {
//				verifyIfInit();
//				switch(m_ifSel) {
//				case I2C:
//					//the data array has to be the exact size specified in the length parm or i2c code blows up
//					//m_i2c.transaction() didn't work.  was probably waiting for the slave to send something.
//		//			boolean aborted = m_i2c.transaction(txData, txData.length, null, 0);
//					boolean aborted = m_i2c.writeBulk(txData);
//					if(aborted) { 
//						TmDbgTk.printIt(-1, "i2c transaction aborted");
//						if( ! m_foundValidI2cResponse) {
//							m_i2cAbortedCount++;
//						}
//					} else {
//						m_foundValidI2cResponse = true;
//					}
//					break;
//		//		case USB:
//		//			m_serial.write(txData, txData.length);
//		//			break;
//		//		case RS232:
//		//			break;
//				}
//			    if(showDebugMsgs) TmDbgTk.printIt(-1, "sent i2c cmd " + ArduinoCmdsE.ENCODER_READING.cmdString.charAt(0) + 
//						" containing encoder reading " + encoderReading + " (big endian, 2 bytes): " + 
//							TmDbgTk.numToHexString(encoderValue));
//				freeIf();
//			}
//		} 
//		else if(m_i2cAbortedCount==21){
//			TmDbgTk.printIt(-1, "20 i2c transactions have aborted without a valid response. Assume i2c not connected (sendEncoderReading())");
//			m_i2cAbortedCount++;
//		}
//		else {}
		
		if( showDebugMsgs || cmdStatus.equals(I2cCmdStatusE.ABORTED)) { TmDbgTk.printIt(-1, "i2c send encoder cmd aborted"); }
	}
	
	private I2cCmdStatusE handleSendingCmd(byte[] txData, boolean showDebugMsgs) {
		I2cCmdStatusE cmdStatus = I2cCmdStatusE.SKIPPED;
		if(( ! m_ifSel.equals(InterfaceSelectE.I2C)) || m_foundValidI2cResponse || m_i2cAbortedCount<=20) {
			synchronized(m_commIfLock) {
				verifyIfInit();
				switch(m_ifSel) {
				case I2C:
					//the data array has to be the exact size specified in the length parm or i2c code blows up
		//			boolean aborted = m_i2c.transaction(txData, txData.length, null, 0);
					boolean aborted = m_i2c.writeBulk(txData);
					if(aborted) { 
						if( ! m_foundValidI2cResponse) {
							m_i2cAbortedCount++;
							cmdStatus = I2cCmdStatusE.ABORTED;
						}
					} else {
						m_foundValidI2cResponse = true;
						cmdStatus = I2cCmdStatusE.SENT;
					}
					break;
		//		case USB:
		//			m_serial.write(txData, txData.length);
		//			break;
		//		case RS232:
		//			break;
				}
				freeIf();
			}
		}
		else if(m_i2cAbortedCount==21){
			TmDbgTk.printIt(-1, "20 i2c transactions have aborted without a valid response. Assume i2c not connected.");
			m_i2cAbortedCount++; //so this message only prints one time...
		}
		else {}
		return cmdStatus;
	}

	
	public enum LocalCmdDancingLedsFunctionE { 
		TEST_ALL_CMDS(0), SET_INITIAL_STATES(80), TEST_ENCODER_CMD(40), 
		TEST_BIN_ARM_ENCODER(50), //JML3.2 - verify OK to use before using (SEND_BIN_ARM_ENCODER_CMD, case 50, etc.)
		ALL_DONE(100);
		public final int eFunctionStateNbr;
	    private LocalCmdDancingLedsFunctionE(int ste) {
	    	eFunctionStateNbr = ste;
	    	if(SEND_BIN_ARM_ENCODER_CMD && (ste==50)) { //JML3.3
	    		TmDbgTk.printIt(-1, "if SupportLocalCmdTestDancingLeds.execute() hasn't had cases 50-54 uncommented," +
	    								" expect an exception...");
	    	}
	    }
	}
	/**
	 * We originally wrote a command to use to send i2c commands to the Arduino that
	 * controls the dancing LEDs, intending to run it from disabledInit(). However,
	 * the command scheduler doesn't schedule commands when the robot is disabled. The
	 * next attempt was to call the methods in the command from disabledInit and 
	 * disabledPeriodic methods, but the calls had errors.  So, we made this copy of the
	 * original command (the class), changed it to NOT extend Command, then edited
	 * the command to call the methods here.  We can then call these same methods from
	 * disabledInit() and disabledPeriodic() to perform the same functions. 
	 * @author robotics
	 *
	 */
 	public class SupportLocalCmdTestDancingLeds { //extends Command {
		
		LocalCmdDancingLedsFunctionE lc_function;
		private TmSsDancingLeds lc_dancingLeds;
		Timer lc_testTimer; //lc_ instead of m_ to indicate scope is that of the local command
		
		public SupportLocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE func) {
//			TmDbgTk.printIt(-1, "ckg for bug - SupportLocalCmdTestDancingLeds constructor, m_bootTimer.get()=" + m_bootTimer.get()); //JML6.2a
			constructorInit(func);
//	        requires(lc_dancingLeds);
		}
		
		public void constructorInit(LocalCmdDancingLedsFunctionE func) {
			lc_function = func;
			lc_dancingLeds = TmSsDancingLeds.getInstance();
			lc_testTimer = new Timer(); //JML6.4
			lc_ds = DriverStation.getInstance(); //JML6.4 moved here from initialize()
			lc_tds = TmDriverStation.getInstance(); //JML6.4 moved here from initialize()
		}
	
		int lc_encoderTestCntl;
		double lc_encoderCmdPeriod;
		double lc_genericCmdPeriod;
		double lc_minimumCmdPeriod;
		int lc_testCnt;
		DriverStation lc_ds;
		TmDriverStation lc_tds;
		
		public void initialize() {
			TmDbgTk.printIt(-1, "ckg for bug - SupportLocalCmdTestDancingLeds initialize(), m_bootTimer.get()=" + m_bootTimer.get()); //JML6.2
			lc_testCnt = lc_function.eFunctionStateNbr;
			lc_encoderTestCntl = 0;
			if(lc_testTimer == null) { lc_testTimer = new Timer(); }
			lc_testTimer.start();
//			m_cmdInProgress = true;
			lc_genericCmdPeriod = 0.5;
			lc_minimumCmdPeriod = 0.015;
		}
	
		public void execute() {
			switch(lc_testCnt) {		
			case 0: //LocalCmdDancingLedsFunctionE.TEST_ALL_CMDS
				sendLedsOnStrCmd(); lc_testCnt++;
			case 1:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 2:
				sendLedsOffStrCmd(); lc_testCnt++;
			case 3:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 4:
				sendLedsOnStrCmd();; lc_testCnt++;
			case 5:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 6:
				sendSetColorCmd(ArduinoColorsE.FLASH);; lc_testCnt++;
			case 7:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 8:
				sendSetColorCmd(ArduinoColorsE.BLUE);; lc_testCnt++;
			case 9:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 10:
				sendSetColorCmd(ArduinoColorsE.RANDOM);; lc_testCnt++;
			case 11:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 12:
				sendSetColorCmd(ArduinoColorsE.RED);; lc_testCnt++;
			case 13:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 14:
				sendRobotStateCmd(ArduinoRobotStateE.DISABLED);; lc_testCnt++;
			case 15:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 16:
				sendRobotStateCmd(ArduinoRobotStateE.ENABLED); lc_testCnt++;
			case 17:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 18:
				sendRobotStateCmd(ArduinoRobotStateE.AUTONOMOUS); lc_testCnt++;
			case 19:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 20:
				sendRobotStateCmd(ArduinoRobotStateE.TELEOP); lc_testCnt++;
			case 21:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 22:
				sendRobotStateCmd(ArduinoRobotStateE.RED_ALLIANCE); lc_testCnt++;
			case 23:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 24:
				sendRobotStateCmd(ArduinoRobotStateE.BLUE_ALLIANCE); lc_testCnt++;
			case 25:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 26:
				sendMechanismSelectCmd(ArduinoMechanismSelectE.ELEVATOR); lc_testCnt++;
			case 27:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 28:
				sendMechanismSelectCmd(ArduinoMechanismSelectE.MECHANICAL_ARM); lc_testCnt++;
			case 29:
				if(lc_testTimer.get() > lc_genericCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 30:
				lc_testCnt = LocalCmdDancingLedsFunctionE.TEST_ENCODER_CMD.eFunctionStateNbr;
				
				
			case 40: //LocalCmdDancingLedsFunctionE.TEST_ENCODER_CMD
				sendEncoderReading(ArduinoCmdsE.ELEV_ENCODER_READING, lc_encoderTestCntl ); lc_testCnt++; //JML3.3
				lc_encoderCmdPeriod = 0.030;
			case 41:
				if(lc_testTimer.get() > lc_encoderCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 42:
				//encoder readings go down (negative) as elevator goes up
				lc_encoderTestCntl -= 30;
				sendEncoderReading(ArduinoCmdsE.ELEV_ENCODER_READING, lc_encoderTestCntl ); //sendEncoderReading(-750);; //JML3.3
				if(lc_encoderTestCntl < -1000 || lc_testTimer.get() > 45.0) {
					lc_testTimer.reset();
					lc_testCnt = 44;
				} else {
					lc_testCnt = 41;
				}
				break;
			case 43:
				if(lc_testTimer.get() > lc_encoderCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 44:
				//encoder readings go down (negative) as elevator goes up
				lc_encoderTestCntl += 30;
				sendEncoderReading(ArduinoCmdsE.ELEV_ENCODER_READING, lc_encoderTestCntl ); //sendEncoderReading(-750);; //JML3.3
				if(lc_encoderTestCntl > -30 || lc_testTimer.get() > 45.0) {
					lc_testTimer.reset();
					if(SEND_BIN_ARM_ENCODER_CMD) 
//JML3.3			lc_testCnt = LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES.eFunctionStateNbr;
					//x=a?b:c; means if(a){x=b;}else{x=c;}
					lc_testCnt = SEND_BIN_ARM_ENCODER_CMD ? LocalCmdDancingLedsFunctionE.TEST_BIN_ARM_ENCODER.eFunctionStateNbr :
															LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES.eFunctionStateNbr;
				} else {
					lc_testCnt = 43;
				}
				break;
			
			//JML3.3 add this block of cases.
			/*********
			 * 	!!! check values of lc_encoderTestCntl and lc_testTimer before uncommenting these cases!!!
			 ********/
//			case 50: //LocalCmdDancingLedsFunctionE.TEST_ENCODER_CMD
//				if(SEND_BIN_ARM_ENCODER_CMD) { sendEncoderReading(ArduinoCmdsE.BIN_ARM_ENCODER_READING, lc_encoderTestCntl ); lc_testCnt++; }
//				lc_encoderCmdPeriod = 0.030;
//			case 51:
//				if(lc_testTimer.get() > lc_encoderCmdPeriod) {
//					lc_testCnt++;
//					lc_testTimer.reset();
//				}
//				break;
//			case 52:
//				//bin arm encoder readings go up as arm goes out
//				lc_encoderTestCntl += 5;
//				if(SEND_BIN_ARM_ENCODER_CMD) { sendEncoderReading(ArduinoCmdsE.BIN_ARM_ENCODER_READING, lc_encoderTestCntl ); }
//				if(lc_encoderTestCntl > 70 || lc_testTimer.get() > 20.0) {
//					lc_testTimer.reset();
//					lc_testCnt = 54;
//				} else {
//					lc_testCnt = 51;
//				}
//				break;
//			case 53:
//				if(lc_testTimer.get() > lc_encoderCmdPeriod) {
//					lc_testCnt++;
//					lc_testTimer.reset();
//				}
//				break;
//			case 54:
//				//bin arm encoder readings go up as arm goes out
//				if(SEND_BIN_ARM_ENCODER_CMD) { lc_encoderTestCntl -= 5; }
//				if(SEND_BIN_ARM_ENCODER_CMD) { sendEncoderReading(ArduinoCmdsE.BIN_ARM_ENCODER_READING, lc_encoderTestCntl ); }
//				if(lc_encoderTestCntl < 0 || lc_testTimer.get() > 20.0) {
//					lc_testTimer.reset();
//					lc_testCnt = LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES.eFunctionStateNbr;
//				} else {
//					lc_testCnt = 53;
//				}
//				break;
				
			case 80: //LocalCmdDancingLedsFunctionE.SET_INITIAL_STATES
				//the default mechanism is the elevator
				if(TmSsBinArm.getInstance().isBinArmManualControlEnabled()) {
					sendMechanismSelectCmd(ArduinoMechanismSelectE.MECHANICAL_ARM, SHOW_DEBUG_MSGS); 
				}
//				else if(TmSsElevator.getInstance().isElevatorManualControlEnabled()) {
//					sendMechanismSelectCmd(ArduinoMechanismSelectE.ELEVATOR);
//				}
				else {
					sendMechanismSelectCmd(ArduinoMechanismSelectE.ELEVATOR, SHOW_DEBUG_MSGS); 
				}
				lc_testCnt++;
			case 81:
				if(lc_testTimer.get() > lc_minimumCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 82:
				if(lc_tds.isBlueAlliance()) {
					sendRobotStateCmd(ArduinoRobotStateE.BLUE_ALLIANCE, SHOW_DEBUG_MSGS); 
				}
				else {
					sendRobotStateCmd(ArduinoRobotStateE.RED_ALLIANCE, SHOW_DEBUG_MSGS); 
				}
				lc_testCnt++;
			case 83:
				if(lc_testTimer.get() > lc_minimumCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 84:
				if(lc_tds.isAutonomous()) {
					sendRobotStateCmd(ArduinoRobotStateE.AUTONOMOUS, SHOW_DEBUG_MSGS); 
				}
				else if(lc_tds.isLiveWindowTest()) {
					sendRobotStateCmd(ArduinoRobotStateE.LIVE_WINDOW, SHOW_DEBUG_MSGS); 
				}
//				else if(lc_tds.isTeleop()) {
//					sendRobotStateCmd(ArduinoRobotStateE.TELEOP); 
//				}
				else {
					sendRobotStateCmd(ArduinoRobotStateE.TELEOP, SHOW_DEBUG_MSGS); 
				}
				lc_testCnt++;
			case 85:
				if(lc_testTimer.get() > lc_minimumCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 86:
				if(lc_tds.isDisabled()) {
					sendRobotStateCmd(ArduinoRobotStateE.DISABLED, SHOW_DEBUG_MSGS); 
				}
				else {
					sendRobotStateCmd(ArduinoRobotStateE.ENABLED, SHOW_DEBUG_MSGS); 
				}
				lc_testCnt++;
			case 87:
				if(lc_testTimer.get() > lc_minimumCmdPeriod) {
					lc_testCnt++;
					lc_testTimer.reset();
				}
				break;
			case 88:
				lc_testCnt = LocalCmdDancingLedsFunctionE.ALL_DONE.eFunctionStateNbr; 
				m_needSetInitStates = false;
				break;
				
			case 100: //all done - LocalCmdDancingLedsFunctionE.ALL_DONE
			default:
				break;
			}	
		}
		
	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        
	        return lc_testCnt == LocalCmdDancingLedsFunctionE.ALL_DONE.eFunctionStateNbr;
	    }

	    // Called once after isFinished returns true
	    protected void end() {
//	    	m_cmdInProgress = false;
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
//	    	m_cmdInProgress = false;
	    }
	} //end supporter class for local command to test all dancingLED commands

 	public class LocalCmdTestDancingLeds extends Command {
		protected SupportLocalCmdTestDancingLeds lc_support;
		LocalCmdDancingLedsFunctionE lc_function;
		private TmSsDancingLeds lc_dancingLeds;
		
		public LocalCmdTestDancingLeds(LocalCmdDancingLedsFunctionE func) {
//			TmDbgTk.printIt(-1, "ckg for bug - LocalCmdTestDancingLeds constructor, m_bootTimer.get()=" + m_bootTimer.get()); //JML6.2a
			lc_support = new SupportLocalCmdTestDancingLeds(func);
			
			lc_support.constructorInit(func);
			
//			lc_function = func;
			lc_dancingLeds = TmSsDancingLeds.getInstance();
			
	        requires(lc_dancingLeds);
		}
	
//		Timer lc_testTimer; //lc_ instead of m_ to indicate scope is that of the local command
//		int lc_encoderTestCntl;
//		double lc_encoderCmdPeriod;
//		double lc_genericCmdPeriod;
//		double lc_minimumCmdPeriod;
//		int lc_testCnt;
//		DriverStation lc_ds;
//		TmDriverStation lc_tds;
		
		public void initialize() {
			TmDbgTk.printIt(-1, "ckg for bug - LocalCmdTestDancingLeds.initialize() m_bootTimer.get()=" + m_bootTimer.get()); //JML6.2
			lc_support.initialize();
//			lc_ds = DriverStation.getInstance();
//			lc_tds = TmDriverStation.getInstance();
//			lc_testCnt = lc_function.eFunctionStateNbr;
//			lc_encoderTestCntl = 0;
//			if(lc_testTimer == null) { lc_testTimer = new Timer(); }
//			lc_testTimer.start();
//			m_cmdInProgress = true;
//			lc_genericCmdPeriod = 0.5;
//			lc_minimumCmdPeriod = 0.015;
			m_cmdInProgress = true;
		}
		
		//called repeatedly until isFinished() returns true or command is cancelled or interrupted
		public void execute() {
			lc_support.execute();
		}
		
	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        return lc_support.isFinished();
//	        return lc_testCnt == LocalCmdDancingLedsFunctionE.ALL_DONE.eFunctionStateNbr;
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    	lc_support.end();
	    	m_cmdInProgress = false;
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    	lc_support.interrupted();
	    	m_cmdInProgress = false;
	    }
	} //end local command to test all dancingLED commands

//	public class LocalCmdToggleDancingLedsOnOff extends Command {
//
//		private TmSsDancingLeds lc_dancingLeds;
//	    public LocalCmdToggleDancingLedsOnOff()
//	    {
//	    	lc_dancingLeds = TmSsDancingLeds.getInstance();
//	        // Use requires() here to declare subsystem dependencies
//	        // eg. requires(chassis);
//	        requires(lc_dancingLeds);
//	    }
//
//	    // Called just before this Command runs the first time
//	    protected void initialize() {
//	    }
//
//	    // Called repeatedly when this Command is scheduled to run
//	    protected void execute()
//	    {
//			synchronized(m_onOffLock) {
//		        m_dancingLedsOn = ! m_dancingLedsOn;
//		        if(m_dancingLedsOn)
//		        {
//		            sendLedsOnStrCmd();
//		        }
//		        else
//		        {
//		            sendLedsOffStrCmd();
//		        }
//			}
//	    }
//
//	    // Make this return true when this Command no longer needs to run execute()
//	    protected boolean isFinished() {
//	        return true;
//	    }
//
//	    // Called once after isFinished returns true
//	    protected void end() {
//	    }
//
//	    // Called when another command which requires one or more of the same
//	    // subsystems is scheduled to run
//	    protected void interrupted() {
//	    }
//	}
}
